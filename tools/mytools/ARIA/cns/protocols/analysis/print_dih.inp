!$Revision: 1.1.1.1 $
!$Date: 2010/03/23 15:27:16 $
!$RCSfile: print_dih.inp,v $

!
! print_dih.inp
! calculate DIHEDRAL rmsd and violations for a given thresholds
! reads .tbl file data/dihedrals/dihedrals.tbl
!     ************************************
!     * Authors and copyright:           *
!     * Jens Linge, EMBL                 *
!     * No warranty implied or expressed *
!     * All rights reserved              *
!     ************************************

!@RUN:protocols/initialize.cns
!(spectrum=$spectrum;iteration=$iteration;)

!@NEWIT:iteration.cns(iteration=$iteration;)

!!! @SPECTRUM:spectrum.cns(spectrum=$spectrum;)

@RUN_CNS:run.cns(
spectrum  =$spectrum;
!iteration =$iteration;
filenames =$filenames;
spectra   =$spectra;
data      =$data;
iterations=$iterations;
saprotocol=$saprotocol;
refine    =$refine;
relax     =$relax;
toppar    =$toppar;
analysis  =$analysis;
)

!set the energy flags:
@@RUN:protocols/flags_new.cns(Iteration=$Iteration; Data=$Data; )


evaluate ($psfcount = 1)
while ($psfcount le 5) loop pars
   if ($filenames.structure_$psfcount ne "") then
      evaluate ($structurefile = "RUN:begin/" + $Filenames.structure_$psfcount)
      structure @@$structurefile end     
   end if
   evaluate ($psfcount = $psfcount + 1)
end loop pars


evaluate ($templatefile = "RUN:" + "begin/" + $Filenames.template)
coor @@$templatefile
delete selection=(not known) end

if ($Data.flags.sani = true) then
  structure @@RUN:toppar/tensor.psf end
end if

!read the parameter files:
evaluate ($par_nonbonded = $toppar.par_nonbonded)
evaluate ($parcount = 1)
while ($parcount le 5) loop pars
   if ($Toppar.prot_par_$parcount ne "") then
      evaluate($prot_par_file= "RUN:toppar/" + $Toppar.prot_par_$parcount)
      parameter @@$prot_par_file end
   end if
   evaluate ($parcount = $parcount + 1)
end loop pars

parameter 
   bonds (all) (all) 1000.0 TOKEN
   angles (all) (all) (all) 500.0 TOKEN
   impropers (all) (all) (all) (all) 500 TOKEN TOKEN
end

evaluate ($cutdih = 5.0)

set display ANALYSIS:dihedrals.disp end

display # dihedral restraints
!read tbl file
evaluate ($filename = "RUN:data/dihedrals/dihedrals.tbl")
restraints dihedral @@$filename scale = 200.0 end

flags exclude * include cdih end

evaluate ($sum_rms_dih = 0)
evaluate ($sumsq_rms_dih = 0)
evaluate ($svio_dih = 0)	! sum violations
evaluate ($ssvio_dih = 0)	! square sum of violations

@RUN_CNS:file.cns(
filenames=$filenames;
iterations=$iterations;
)

evaluate ($count = 0)
evaluate ($TotalNstruct = 0)
while ($count lt $Iterations.Structures) loop main
   evaluate ($count=$count+1)
   evaluate ($file = $filenames.bestfile_$count)
!   if ($file ne "") then
      evaluate ($TotalNstruct = $TotalNstruct + 1)
!   end if
end loop main

if ($Iterations.Assignstruct > $TotalNstruct) then
  evaluate ($Iterations.Assignstruct = $ToTalNstruct)
end if

evaluate ($count = 1)
evaluate ($nstruc1 = 0)
while ($count le $Iterations.Assignstruct) loop main
   evaluate ($file = $filenames.bestfile_$count)
!   display $file
   coor init end
   if ($file ne "") then
     coor @@$file
     evaluate ($nstruc1 = $nstruc1 + 1)

     print thresh=$cutdih cdih  
     evaluate ($rms_dih = $result)
     evaluate ($sum_rms_dih = $sum_rms_dih + $rms_dih )
     evaluate ($sumsq_rms_dih = $sumsq_rms_dih + $rms_dih**2 )

     evaluate ($vio_dih = $violations)
     evaluate ($svio_dih = $svio_dih +$vio_dih)
     evaluate ($ssvio_dih = $ssvio_dih +$vio_dih**2)

     display # DIH $file rmsd: $rms_dih    vio: $vio_dih

   end if
   evaluate ($count = $count + 1)
end loop main


evaluate ($m_rms_dih = $sum_rms_dih / $nstruc1)
evaluate ($m_vio_dih = $svio_dih / $nstruc1)
evaluate ($sd_rms_dih =
          sqrt(($sumsq_rms_dih - $nstruc1*$m_rms_dih**2)/ $nstruc1))
evaluate ($sd_vio_dih =
          sqrt(($ssvio_dih - $nstruc1*$m_vio_dih**2)/ $nstruc1))

display # mean values $filename
display # DIH rmsd (deg) $m_rms_dih ($sd_rms_dih) 
display # DIH vio > $cutdih deg: $m_vio_dih ($sd_vio_dih)
display m_rms_dih	sd_rms_dih	cutdih	m_vio_dih	sd_vio_dih
display $m_rms_dih	$sd_rms_dih	$cutdih	$m_vio_dih	$sd_vio_dih
display #

display # CSI derived dihedral restraints
!read tbl file
restraints dihedral reset end
evaluate ($filename = "RUN:data/dihedrals/dihedrals_csi.tbl")
restraints dihedral @@$filename scale = 200.0 end

flags exclude * include cdih end

evaluate ($sum_rms_dih = 0)
evaluate ($sumsq_rms_dih = 0)
evaluate ($svio_dih = 0)	! sum violations
evaluate ($ssvio_dih = 0)	! square sum of violations

!@RUN_CNS:file.cns(
!filenames=$filenames;
!iterations=&iterations;
!)

evaluate ($count = 1)
evaluate ($nstruc1 = 0)
while ($count le $Iterations.Assignstruct) loop main
   evaluate ($file = $filenames.bestfile_$count)
!   display $file
   coor init end
   if ($file ne "") then
     coor @@$file
     evaluate ($nstruc1 = $nstruc1 + 1)

     print thresh=$cutdih cdih  
     evaluate ($rms_dih = $result)
     evaluate ($sum_rms_dih = $sum_rms_dih + $rms_dih )
     evaluate ($sumsq_rms_dih = $sumsq_rms_dih + $rms_dih**2 )

     evaluate ($vio_dih = $violations)
     evaluate ($svio_dih = $svio_dih +$vio_dih)
     evaluate ($ssvio_dih = $ssvio_dih +$vio_dih**2)

     display # DIH $file rmsd: $rms_dih    vio: $vio_dih
   
   end if
   evaluate ($count = $count + 1)
end loop main


evaluate ($m_rms_dih = $sum_rms_dih / $nstruc1)
evaluate ($m_vio_dih = $svio_dih / $nstruc1)
evaluate ($sd_rms_dih =
          sqrt(($sumsq_rms_dih - $nstruc1*$m_rms_dih**2)/ $nstruc1))
evaluate ($sd_vio_dih =
          sqrt(($ssvio_dih - $nstruc1*$m_vio_dih**2)/ $nstruc1))

display # mean values $filename
display # DIH rmsd (deg) $m_rms_dih ($sd_rms_dih) 
display # DIH vio > $cutdih deg: $m_vio_dih ($sd_vio_dih)
display m_rms_dih	sd_rms_dih	cutdih	m_vio_dih	sd_vio_dih
display $m_rms_dih	$sd_rms_dih	$cutdih	$m_vio_dih	$sd_vio_dih
display #

display # TALOS derived dihedral restraints
!read tbl file
restraints dihedral reset end
evaluate ($filename = "RUN:data/dihedrals/dihedrals_talos.tbl")
restraints dihedral @@$filename scale = 200.0 end

flags exclude * include cdih end

evaluate ($sum_rms_dih = 0)
evaluate ($sumsq_rms_dih = 0)
evaluate ($svio_dih = 0)	! sum violations
evaluate ($ssvio_dih = 0)	! square sum of violations

!@RUN_CNS:file.cns(
!filenames=$filenames;
!iterations=$iterations;
!)

evaluate ($count = 1)
evaluate ($nstruc1 = 0)
while ($count le $Iterations.Assignstruct) loop main
   evaluate ($file = $filenames.bestfile_$count)
!   display $file
   coor init end
   if ($file ne "") then
     coor @@$file
     evaluate ($nstruc1 = $nstruc1 + 1)

     print thresh=$cutdih cdih  
     evaluate ($rms_dih = $result)
     evaluate ($sum_rms_dih = $sum_rms_dih + $rms_dih )
     evaluate ($sumsq_rms_dih = $sumsq_rms_dih + $rms_dih**2 )

     evaluate ($vio_dih = $violations)
     evaluate ($svio_dih = $svio_dih +$vio_dih)
     evaluate ($ssvio_dih = $ssvio_dih +$vio_dih**2)

     display # DIH $file rmsd: $rms_dih    vio: $vio_dih

   end if

   evaluate ($count = $count + 1)

end loop main


evaluate ($m_rms_dih = $sum_rms_dih / $nstruc1)
evaluate ($m_vio_dih = $svio_dih / $nstruc1)
evaluate ($sd_rms_dih =
          sqrt(($sumsq_rms_dih - $nstruc1*$m_rms_dih**2)/ $nstruc1))
evaluate ($sd_vio_dih =
          sqrt(($ssvio_dih - $nstruc1*$m_vio_dih**2)/ $nstruc1))

display # mean values $filename
display # DIH rmsd (deg) $m_rms_dih ($sd_rms_dih) 
display # DIH vio > $cutdih deg: $m_vio_dih ($sd_vio_dih)
display m_rms_dih	sd_rms_dih	cutdih	m_vio_dih	sd_vio_dih
display $m_rms_dih	$sd_rms_dih	$cutdih	$m_vio_dih	$sd_vio_dih

stop
