!$Revision: 1.1.1.1 $
!$Date: 2010/03/23 15:27:16 $
!$RCSfile: print_coup.inp,v $

! print_coup.inp
! print statistics on coupling constant restraints
! ************************************
! * Authors and copyright: *
! * Jens Linge, EMBL *
! * No warranty implied or expressed *
! * All rights reserved *
! ************************************

!@RUN:protocols/initialize.cns
!(spectrum=$spectrum;iteration=$iteration;)

!@NEWIT:iteration.cns(iteration=$iteration;)

@RUN_CNS:run.cns(
spectrum =$spectrum;
!iteration =$iteration;
filenames =$filenames;
spectra =$spectra;
data =$data;
iterations=$iterations;
saprotocol=$saprotocol;
refine =$refine;
relax =$relax;
toppar =$toppar;
analysis =$analysis;
)

!set the energy flags:
@@RUN:protocols/flags_new.cns(Iteration=$Iteration; Data=$Data; )

evaluate ($psfcount = 1)
while ($psfcount le 5) loop pars
if ($filenames.structure_$psfcount ne "") then
evaluate ($structurefile = "RUN:begin/" + $Filenames.structure_$psfcount)
structure @@$structurefile end 
end if
evaluate ($psfcount = $psfcount + 1)
end loop pars


evaluate ($templatefile = "RUN:" + "begin/" + $Filenames.template)
coor @@$templatefile
delete selection=(not known) end

if ($Data.flags.sani = true) then
structure @@RUN:toppar/tensor.psf end
end if

!read the parameter files:
evaluate ($par_nonbonded = $toppar.par_nonbonded)
evaluate ($parcount = 1)
while ($parcount le 5) loop pars
if ($Toppar.prot_par_$parcount ne "") then
evaluate($prot_par_file= "RUN:toppar/" + $Toppar.prot_par_$parcount)
parameter @@$prot_par_file end
end if
evaluate ($parcount = $parcount + 1)
end loop pars


parameter 
bonds (all) (all) 1000.0 TOKEN
angles (all) (all) (all) 500.0 TOKEN
impropers (all) (all) (all) (all) 500 TOKEN TOKEN
end

set display ANALYSIS:couplings.disp end

flags exclude * include bond angle impr vdw noe coup end


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
couplings
nres 300 !number of restraints for allocating memory
potential harmonic
! potential square
if ($Data.c1_on eq true) then
class c1
potential harmonic
{degen 1}
force 1.0 !1 energy constant
coefficients $Data.c1_karplusa $Data.c1_karplusb $Data.c1_karplusc
$Data.c1_karplusd
evaluate ($loadnow = "RUN:" + "data/jcouplings/c1.tbl")
@@$loadnow
end if
if ($Data.c2_on eq true) then
class c2
potential harmonic
{degen 1}
force 1.0 !1 energy constant
coefficients $Data.c2_karplusa $Data.c2_karplusb $Data.c2_karplusc
$Data.c2_karplusd
evaluate ($loadnow = "RUN:" + "data/jcouplings/c2.tbl")
@@$loadnow
end if 
if ($Data.c3_on eq true) then
class c3
potential harmonic
{degen 1}
force 1.0 !1 energy constant
coefficients $Data.c3_karplusa $Data.c3_karplusb $Data.c3_karplusc
$Data.c3_karplusd
evaluate ($loadnow = "RUN:" + "data/jcouplings/c3.tbl")
@@$loadnow
end if 
if ($Data.c4_on eq true) then
class c4
potential harmonic
{degen 1}
force 1.0 !1 energy constant
coefficients $Data.c4_karplusa $Data.c4_karplusb $Data.c4_karplusc
$Data.c4_karplusd
evaluate ($loadnow = "RUN:" + "data/jcouplings/c4.tbl")
@@$loadnow
end if 
if ($Data.c5_on eq true) then
class c5
potential harmonic
{degen 1}
force 1.0 !1 energy constant
coefficients $Data.c5_karplusa $Data.c5_karplusb $Data.c5_karplusc
$Data.c5_karplusd
evaluate ($loadnow = "RUN:" + "data/jcouplings/c5.tbl")
@@$loadnow
end if
end 
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

evaluate ($sum_rms_coup_c1 = 0)
evaluate ($sumsq_rms_coup_c1 = 0)
evaluate ($sum_rms_coup_c2 = 0)
evaluate ($sumsq_rms_coup_c2 = 0)
evaluate ($sum_rms_coup_c3 = 0)
evaluate ($sumsq_rms_coup_c3 = 0)
evaluate ($sum_rms_coup_c4 = 0)
evaluate ($sumsq_rms_coup_c4 = 0)
evaluate ($sum_rms_coup_c5 = 0)
evaluate ($sumsq_rms_coup_c5 = 0)

!evaluate ($Data.cdih = 0)
@RUN_CNS:file.cns(
filenames=$filenames;
iterations=$iterations;
)

evaluate ($count = 0)
evaluate ($TotalNstruct = 0)
while ($count lt $Iterations.Structures) loop main
evaluate ($count=$count+1)
evaluate ($file = $filenames.bestfile_$count)
if ($file ne "") then
evaluate ($TotalNstruct = $TotalNstruct + 1)
end if
end loop main

if ($Iterations.Assignstruct > $TotalNstruct) then
evaluate ($Iterations.Assignstruct = $ToTalNstruct)
end if


evaluate ($count = 1)
evaluate ($nstruc1 = 0)
while ($count le $Iterations.Assignstruct) loop main

evaluate ($file = $filenames.bestfile_$count)
display $file
coor init end
if ($file ne "") then
coor @@$file
evaluate ($nstruc1 = $nstruc1 + 1)

if ($Data.c1_on eq true) then
coup print thresh=0.5 class c1 end
evaluate ($rms_coup_c1 = $result)
evaluate ($sum_rms_coup_c1 = $sum_rms_coup_c1 + $rms_coup_c1)
evaluate ($sumsq_rms_coup_c1 = $sumsq_rms_coup_c1 + $rms_coup_c1**2)
display # c1: $file $rms_coup_c1
end if
if ($Data.c2_on eq true) then
coup print thresh=0.5 class c2 end
evaluate ($rms_coup_c2 = $result)
evaluate ($sum_rms_coup_c2 = $sum_rms_coup_c2 + $rms_coup_c2)
evaluate ($sumsq_rms_coup_c2 = $sumsq_rms_coup_c2 + $rms_coup_c2**2)
display # c2: $file $rms_coup_c2
end if 
if ($Data.c3_on eq true) then
coup print thresh=0.5 class c3 end
evaluate ($rms_coup_c3 = $result)
evaluate ($sum_rms_coup_c3 = $sum_rms_coup_c3 + $rms_coup_c3)
evaluate ($sumsq_rms_coup_c3 = $sumsq_rms_coup_c3 + $rms_coup_c3**2)
display # c3: $file $rms_coup_c3
end if 
if ($Data.c4_on eq true) then
coup print thresh=0.5 class c4 end
evaluate ($rms_coup_c4 = $result)
evaluate ($sum_rms_coup_c4 = $sum_rms_coup_c4 + $rms_coup_c4)
evaluate ($sumsq_rms_coup_c4 = $sumsq_rms_coup_c4 + $rms_coup_c4**2)
display # c4: $file $rms_coup_c4
end if 
if ($Data.c5_on eq true) then
coup print thresh=0.5 class c5 end
evaluate ($rms_coup_c5 = $result)
evaluate ($sum_rms_coup_c5 = $sum_rms_coup_c5 + $rms_coup_c5)
evaluate ($sumsq_rms_coup_c5 = $sumsq_rms_coup_c5 + $rms_coup_c5**2)
display # c5: $file $rms_coup_c5
end if

end if
evaluate ($count = $count + 1)
end loop main


if ($Data.c1_on eq true) then
evaluate ($mean_rms_coup_c1 = $sum_rms_coup_c1 / $nstruc1)
evaluate ($stdev_rms_coup_c1 = sqrt(($sumsq_rms_coup_c1 -
$nstruc1*$mean_rms_coup_c1**2)/ $nstruc1))
display # mean values couplings class c1
display # coup $mean_rms_coup_c1 (+/- $stdev_rms_coup_c1 )
end if
if ($Data.c2_on eq true) then
evaluate ($mean_rms_coup_c2 = $sum_rms_coup_c2 / $nstruc1)
evaluate ($stdev_rms_coup_c2 = sqrt(($sumsq_rms_coup_c2 -
$nstruc1*$mean_rms_coup_c2**2)/ $nstruc1))
display # mean values couplings class c2
display # coup $mean_rms_coup_c2 (+/- $stdev_rms_coup_c2 )
end if 
if ($Data.c3_on eq true) then
evaluate ($mean_rms_coup_c3 = $sum_rms_coup_c3 / $nstruc1)
evaluate ($stdev_rms_coup_c3 = sqrt(($sumsq_rms_coup_c3 -
$nstruc1*$mean_rms_coup_c3**2)/ $nstruc1))
display # mean values couplings class c3
display # coup $mean_rms_coup_c3 (+/- $stdev_rms_coup_c3 )
end if 
if ($Data.c4_on eq true) then
evaluate ($mean_rms_coup_c4 = $sum_rms_coup_c4 / $nstruc1)
evaluate ($stdev_rms_coup_c4 = sqrt(($sumsq_rms_coup_c4 -
$nstruc1*$mean_rms_coup_c4**2)/ $nstruc1))
display # mean values couplings class c4
display # coup $mean_rms_coup_c4 (+/- $stdev_rms_coup_c4 )
end if 
if ($Data.c5_on eq true) then
evaluate ($mean_rms_coup_c5 = $sum_rms_coup_c5 / $nstruc1)
evaluate ($stdev_rms_coup_c5 = sqrt(($sumsq_rms_coup_c5 -
$nstruc1*$mean_rms_coup_c5**2)/ $nstruc1))
display # mean values couplings class c5
display # coup $mean_rms_coup_c5 (+/- $stdev_rms_coup_c5 )
end if

stop
