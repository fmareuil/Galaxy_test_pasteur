!$Revision: 1.1.1.1 $
!$Date: 2010/03/23 15:27:16 $
!$RCSfile: energy.inp,v $

! energy.inp:
! calculate non-bonded energy (vdw and elec) from parameter file 
!     ************************************
!     * Authors and copyright:           *
!     * Michael Nilges, Jens Linge, EMBL *
!     * No warranty implied or expressed *
!     * All rights reserved              *
!     ************************************

! needs the following modules from protocols
!   initialise.cns
!   run.cns

!@RUN:protocols/initialize.cns
!(spectrum=$spectrum;iteration=$iteration;)

!@NEWIT:iteration.cns(iteration=$iteration;)

!!!@SPECTRUM:spectrum.cns(spectrum=$spectrum;)

@RUN_CNS:run.cns(
spectrum  =$spectrum;
!iteration =$iteration;
filenames =$filenames;
spectra   =$spectra;
data      =$data;
iterations=$iterations;
saprotocol=$saprotocol;
refine    =$refine;
relax     =$relax;
toppar    =$toppar;
analysis  =$analysis;
)

!set the energy flags:
@@RUN:protocols/flags_new.cns(Iteration=$Iteration; Data=$Data; )
flags include dihed elec end

evaluate ($psfcount = 1)
while ($psfcount le 5) loop pars
   if ($filenames.structure_$psfcount ne "") then
      evaluate ($structurefile = "RUN:begin/" + $Filenames.structure_$psfcount)
      structure @@$structurefile end     
   end if
   evaluate ($psfcount = $psfcount + 1)
end loop pars

evaluate ($templatefile = "RUN:" + "begin/" + $Filenames.template)
coor @@$templatefile
delete selection=(not known) end

if ($Data.flags.sani = true) then
  structure @@RUN:toppar/tensor.psf end
end if

!the water refinement uses a full Lenard-Jones potential:
evaluate ($par_nonbonded = "OPLSX")
!read the parameter files:
evaluate ($par_nonbonded = $toppar.par_nonbonded)
evaluate ($parcount = 1)
while ($parcount le 5) loop pars
   if ($Toppar.prot_par_$parcount ne "") then
      evaluate($prot_par_file= "RUN:toppar/" + $Toppar.prot_par_$parcount)
      parameter @@$prot_par_file end
   end if
   evaluate ($parcount = $parcount + 1)
end loop pars
parameter 
  @@RUN:toppar/parallhdg5.3.sol
  nbonds
    nbxmod=5 atom cdiel shift 
    cutnb=9.5 ctofnb=8.5 ctonnb=6.5 eps=1.0 e14fac=0.4 inhibit 0.25
    wmin=0.5
    tolerance  0.5
  end
end

if ($Data.flags.sani = true) then
  structure @@RUN:toppar/tensor.psf end
end if

set display ANALYSIS:energies.disp end
display #file Etot Ebond Eangle Eimpr Edihed Evdw Eelec

evaluate ($sum_tot = 0)
evaluate ($sumsq_tot = 0)
evaluate ($sum_bond = 0)
evaluate ($sumsq_bond = 0)
evaluate ($sum_angle = 0)
evaluate ($sumsq_angle = 0)
evaluate ($sum_impr = 0)
evaluate ($sumsq_impr = 0)
evaluate ($sum_dihed= 0)
evaluate ($sumsq_dihed = 0)
evaluate ($sum_vdw = 0)
evaluate ($sumsq_vdw = 0)
evaluate ($sum_elec = 0)
evaluate ($sumsq_elec = 0)

@RUN_CNS:file.cns(
filenames=$filenames;
iterations=$iterations;
)

evaluate ($count = 1)
evaluate ($nstruc1 = 0)
while ($count le $Iterations.Assignstruct) loop main
   evaluate ($count = $count + 1)
   evaluate ($file = $filenames.bestfile_$count)
   coor init end
   if ($file ne "") then
     coor @@$file

! ---- WR Apr 12 03

     delete selection=(resn ani) end

! ----

     evaluate ($nstruc1 = $nstruc1 + 1)

     energy end
     evaluate ($sum_tot = $sum_tot + $ener)
     evaluate ($sumsq_tot = $sumsq_tot + $ener**2)
     evaluate ($sum_bond = $sum_bond + $bond)
     evaluate ($sumsq_bond = $sumsq_bond + $bond**2)
     evaluate ($sum_angle = $sum_angle + $angl)
     evaluate ($sumsq_angle = $sumsq_angle + $angl**2)
     evaluate ($sum_impr = $sum_impr + $impr)
     evaluate ($sumsq_impr = $sumsq_impr + $impr**2)
     evaluate ($sum_dihed = $sum_dihed + $dihe)
     evaluate ($sumsq_dihed = $sumsq_dihed + $dihe**2)
     evaluate ($sum_vdw = $sum_vdw + $vdw)
     evaluate ($sumsq_vdw = $sumsq_vdw + $vdw**2)
     evaluate ($sum_elec = $sum_elec + $elec)
     evaluate ($sumsq_elec = $sumsq_elec + $elec**2)

     display # $file $ener $bond $angl $impr $dihe $vdw $elec

   end if
   if ($count ge $Iterations.AssignStruct) then exit loop main end if
end loop main

evaluate ($mean_tot = $sum_tot / $nstruc1)
evaluate ($stdev_tot = sqrt(($sumsq_tot - $nstruc1*$mean_tot**2)/ $nstruc1))
evaluate ($mean_bond = $sum_bond / $nstruc1)
evaluate ($stdev_bond = sqrt(($sumsq_bond - $nstruc1*$mean_bond**2)/ $nstruc1))
evaluate ($mean_angle = $sum_angle / $nstruc1)
evaluate ($stdev_angle = sqrt(($sumsq_angle - $nstruc1*$mean_angle**2)/ $nstruc1))
evaluate ($mean_impr = $sum_impr / $nstruc1)
evaluate ($stdev_impr = sqrt(($sumsq_impr - $nstruc1*$mean_impr**2)/ $nstruc1))
evaluate ($mean_dihed = $sum_dihed / $nstruc1)
evaluate ($stdev_dihed = sqrt(($sumsq_dihed - $nstruc1*$mean_dihed**2)/ $nstruc1))
evaluate ($mean_vdw = $sum_vdw / $nstruc1)
evaluate ($stdev_vdw = sqrt(($sumsq_vdw - $nstruc1*$mean_vdw**2)/ $nstruc1))
evaluate ($mean_elec = $sum_elec / $nstruc1)
evaluate ($stdev_elec = sqrt(($sumsq_elec - $nstruc1*$mean_elec**2)/ $nstruc1))

display # mean values
display # Etot   $mean_tot (+/- $stdev_tot )
display # Ebond  $mean_bond (+/- $stdev_bond )
display # Eangle $mean_angle (+/- $stdev_angle )
display # Eimpr  $mean_impr (+/- $stdev_impr )
display # Edihed $mean_dihed (+/- $stdev_dihed )
display # Evdw   $mean_vdw (+/- $stdev_vdw )
display # Eelec  $mean_elec (+/- $stdev_elec )
display #
display mean_vdw	stdev_vdw	mean_elec	stdev_elec	
display $mean_vdw	$stdev_vdw	$mean_elec	$stdev_elec	

stop
